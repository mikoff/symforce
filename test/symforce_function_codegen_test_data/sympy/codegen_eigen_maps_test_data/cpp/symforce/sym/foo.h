// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: foo
 *
 * Args:
 *     x: Scalar
 *
 * Outputs:
 *     res0: Matrix33
 *     res1: Matrix31
 *     res2: Rot3
 *     res3: Scalar
 */
template <typename Scalar>
void Foo(const Scalar x, Eigen::Map<Eigen::Matrix<Scalar, 3, 3>> res0,
         Eigen::Map<Eigen::Matrix<Scalar, 3, 1>> res1, sym::Rot3<Scalar>* const res2 = nullptr,
         Scalar* const res3 = nullptr) {
  // Total ops: 0

  // Input arrays

  // Intermediate terms (0)

  // Output terms (4)
  if (res0.data() != nullptr) {
    res0.setZero();

    res0(0, 0) = 1;
    res0(1, 1) = 1;
    res0(2, 2) = 1;
  }

  if (res1.data() != nullptr) {
    res1.setZero();
  }

  if (res2 != nullptr) {
    Eigen::Matrix<Scalar, 4, 1> _res2;

    _res2[0] = 0;
    _res2[1] = 0;
    _res2[2] = 0;
    _res2[3] = 1;

    *res2 = sym::Rot3<Scalar>(_res2);
  }

  if (res3 != nullptr) {
    Scalar& _res3 = (*res3);

    _res3 = x;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
