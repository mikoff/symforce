// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/equirectangular_camera_cal.h>
#include <sym/pose3.h>

namespace sym {

/**
 * Return the 2dof residual of reprojecting the landmark into the target camera and comparing
 * against the correspondence in the target camera.
 *
 * The landmark is specified as a pixel in the source camera and an inverse range; this means the
 * landmark is fixed in the source camera and always has residual 0 there (this 0 residual is not
 * returned, only the residual in the target camera is returned).
 *
 * The norm of the residual is whitened using the
 * :class:`BarronNoiseModel <symforce.opt.noise_models.BarronNoiseModel>`.  Whitening each
 * component of the reprojection error separately would result in rejecting individual components
 * as outliers. Instead, we minimize the whitened norm of the full reprojection error for each
 * point.  See
 * :meth:`ScalarNoiseModel.whiten_norm <symforce.opt.noise_models.ScalarNoiseModel.whiten_norm>`
 * for more information on this, and
 * :class:`BarronNoiseModel <symforce.opt.noise_models.BarronNoiseModel>` for more information on
 * the noise model.
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     source_calibration: The source camera calibration
 *     target_pose: The pose of the target camera
 *     target_calibration: The target camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     source_pixel: The location of the landmark in the source camera
 *     target_pixel: The location of the correspondence in the target camera
 *     weight: The weight of the factor
 *     gnc_mu: The mu convexity parameter for the
 *         :class:`BarronNoiseModel <symforce.opt.noise_models.BarronNoiseModel>`
 *     gnc_scale: The scale parameter for the
 *         :class:`BarronNoiseModel <symforce.opt.noise_models.BarronNoiseModel>`
 *     epsilon: Small positive value
 *
 * Outputs:
 *     res: 2dof residual of the reprojection
 *     jacobian: (2x13) jacobian of res wrt args source_pose (6), target_pose (6),
 *               source_inverse_range (1)
 *     hessian: (13x13) Gauss-Newton hessian for args source_pose (6), target_pose (6),
 *              source_inverse_range (1)
 *     rhs: (13x1) Gauss-Newton rhs for args source_pose (6), target_pose (6), source_inverse_range
 *          (1)
 */
template <typename Scalar>
void InverseRangeLandmarkEquirectangularGncFactor(
    const sym::Pose3<Scalar>& source_pose,
    const sym::EquirectangularCameraCal<Scalar>& source_calibration,
    const sym::Pose3<Scalar>& target_pose,
    const sym::EquirectangularCameraCal<Scalar>& target_calibration,
    const Scalar source_inverse_range, const Eigen::Matrix<Scalar, 2, 1>& source_pixel,
    const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar weight, const Scalar gnc_mu,
    const Scalar gnc_scale, const Scalar epsilon, Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 978

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _source_calibration = source_calibration.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _target_calibration = target_calibration.Data();

  // Intermediate terms (258)
  const Scalar _tmp0 = std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp1 = -2 * _tmp0;
  const Scalar _tmp2 = std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp3 = -2 * _tmp2;
  const Scalar _tmp4 = _tmp1 + _tmp3 + 1;
  const Scalar _tmp5 = 2 * _source_pose[0];
  const Scalar _tmp6 = _source_pose[2] * _tmp5;
  const Scalar _tmp7 = 2 * _source_pose[3];
  const Scalar _tmp8 = _source_pose[1] * _tmp7;
  const Scalar _tmp9 = _tmp6 + _tmp8;
  const Scalar _tmp10 = (-_source_calibration[2] + source_pixel(0, 0)) / _source_calibration[0];
  const Scalar _tmp11 = std::cos(_tmp10);
  const Scalar _tmp12 = (-_source_calibration[3] + source_pixel(1, 0)) / _source_calibration[1];
  const Scalar _tmp13 = std::cos(_tmp12);
  const Scalar _tmp14 = std::pow(_tmp13, Scalar(2));
  const Scalar _tmp15 = std::sin(_tmp10);
  const Scalar _tmp16 = std::sin(_tmp12);
  const Scalar _tmp17 =
      std::pow(Scalar(std::pow(_tmp11, Scalar(2)) * _tmp14 + _tmp14 * std::pow(_tmp15, Scalar(2)) +
                      std::pow(_tmp16, Scalar(2)) + epsilon),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp18 = _tmp13 * _tmp17;
  const Scalar _tmp19 = _tmp11 * _tmp18;
  const Scalar _tmp20 = _source_pose[4] - _target_pose[4];
  const Scalar _tmp21 = _source_pose[1] * _tmp5;
  const Scalar _tmp22 = _source_pose[2] * _tmp7;
  const Scalar _tmp23 = -_tmp22;
  const Scalar _tmp24 = _tmp21 + _tmp23;
  const Scalar _tmp25 = _tmp16 * _tmp17;
  const Scalar _tmp26 = std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp27 = -2 * _tmp26;
  const Scalar _tmp28 = std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp29 = 1 - 2 * _tmp28;
  const Scalar _tmp30 = _tmp15 * _tmp18;
  const Scalar _tmp31 =
      _tmp19 * _tmp9 + _tmp20 * source_inverse_range + _tmp24 * _tmp25 + _tmp30 * (_tmp27 + _tmp29);
  const Scalar _tmp32 = 2 * _target_pose[2];
  const Scalar _tmp33 = _target_pose[3] * _tmp32;
  const Scalar _tmp34 = 2 * _target_pose[1];
  const Scalar _tmp35 = _target_pose[0] * _tmp34;
  const Scalar _tmp36 = _tmp33 + _tmp35;
  const Scalar _tmp37 = _source_pose[5] - _target_pose[5];
  const Scalar _tmp38 = _tmp21 + _tmp22;
  const Scalar _tmp39 = _source_pose[0] * _tmp7;
  const Scalar _tmp40 = -_tmp39;
  const Scalar _tmp41 = 2 * _source_pose[1] * _source_pose[2];
  const Scalar _tmp42 = _tmp40 + _tmp41;
  const Scalar _tmp43 = std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp44 = -2 * _tmp43;
  const Scalar _tmp45 = _tmp19 * _tmp42 + _tmp25 * (_tmp29 + _tmp44) + _tmp30 * _tmp38 +
                        _tmp37 * source_inverse_range;
  const Scalar _tmp46 = _target_pose[0] * _tmp32;
  const Scalar _tmp47 = _target_pose[3] * _tmp34;
  const Scalar _tmp48 = -_tmp47;
  const Scalar _tmp49 = _tmp46 + _tmp48;
  const Scalar _tmp50 = -_tmp8;
  const Scalar _tmp51 = _tmp18 * (_tmp50 + _tmp6);
  const Scalar _tmp52 = _source_pose[6] - _target_pose[6];
  const Scalar _tmp53 = _tmp39 + _tmp41;
  const Scalar _tmp54 = _tmp15 * _tmp51 + _tmp19 * (_tmp27 + _tmp44 + 1) + _tmp25 * _tmp53 +
                        _tmp52 * source_inverse_range;
  const Scalar _tmp55 = _tmp36 * _tmp45 + _tmp49 * _tmp54;
  const Scalar _tmp56 = _tmp31 * _tmp4 + _tmp55;
  const Scalar _tmp57 = std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp58 = 1 - 2 * _tmp57;
  const Scalar _tmp59 = _tmp1 + _tmp58;
  const Scalar _tmp60 = _tmp46 + _tmp47;
  const Scalar _tmp61 = _target_pose[2] * _tmp34;
  const Scalar _tmp62 = 2 * _target_pose[0] * _target_pose[3];
  const Scalar _tmp63 = -_tmp62;
  const Scalar _tmp64 = _tmp61 + _tmp63;
  const Scalar _tmp65 = _tmp31 * _tmp60 + _tmp45 * _tmp64;
  const Scalar _tmp66 = _tmp54 * _tmp59 + _tmp65;
  const Scalar _tmp67 = _tmp66 + std::copysign(epsilon, _tmp66);
  const Scalar _tmp68 = _target_calibration[0] * std::atan2(_tmp56, _tmp67) +
                        _target_calibration[2] - target_pixel(0, 0);
  const Scalar _tmp69 = _tmp3 + _tmp58;
  const Scalar _tmp70 = -_tmp33;
  const Scalar _tmp71 = _tmp35 + _tmp70;
  const Scalar _tmp72 = _tmp61 + _tmp62;
  const Scalar _tmp73 = _tmp31 * _tmp71 + _tmp54 * _tmp72;
  const Scalar _tmp74 = _tmp45 * _tmp69 + _tmp73;
  const Scalar _tmp75 = std::pow(_tmp56, Scalar(2));
  const Scalar _tmp76 = std::pow(_tmp66, Scalar(2)) + _tmp75;
  const Scalar _tmp77 = std::sqrt(Scalar(_tmp76 + epsilon));
  const Scalar _tmp78 = _tmp77;
  const Scalar _tmp79 = _target_calibration[1] * std::atan2(_tmp74, _tmp78) +
                        _target_calibration[3] - target_pixel(1, 0);
  const Scalar _tmp80 = std::pow(_tmp68, Scalar(2)) + std::pow(_tmp79, Scalar(2)) + epsilon;
  const Scalar _tmp81 = std::pow(_tmp80, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp82 = std::sqrt(weight);
  const Scalar _tmp83 = Scalar(1.0) / (epsilon - gnc_mu + 1);
  const Scalar _tmp84 = epsilon + std::fabs(_tmp83);
  const Scalar _tmp85 = std::pow(gnc_scale, Scalar(-2));
  const Scalar _tmp86 = _tmp80 * _tmp85 / _tmp84 + 1;
  const Scalar _tmp87 = 2 - _tmp83;
  const Scalar _tmp88 = _tmp87 + epsilon * std::copysign(Scalar(1.0), _tmp87);
  const Scalar _tmp89 = (Scalar(1) / Scalar(2)) * _tmp88;
  const Scalar _tmp90 =
      std::sqrt(Scalar(2)) * std::sqrt(Scalar(_tmp84 * (std::pow(_tmp86, _tmp89) - 1) / _tmp88));
  const Scalar _tmp91 = std::max<Scalar>(
      0, std::min<Scalar>(
             (((Scalar(M_PI) - std::fabs(_tmp10)) > 0) - ((Scalar(M_PI) - std::fabs(_tmp10)) < 0)),
             (((-std::fabs(_tmp12) + Scalar(M_PI_2)) > 0) -
              ((-std::fabs(_tmp12) + Scalar(M_PI_2)) < 0))));
  const Scalar _tmp92 = std::pow(_tmp74, Scalar(2));
  const Scalar _tmp93 = std::max<Scalar>(0, (((_tmp76 + _tmp92) > 0) - ((_tmp76 + _tmp92) < 0)));
  const Scalar _tmp94 = _tmp82 * _tmp90 * _tmp91 * _tmp93;
  const Scalar _tmp95 = _tmp81 * _tmp94;
  const Scalar _tmp96 = _tmp68 * _tmp95;
  const Scalar _tmp97 = _tmp79 * _tmp95;
  const Scalar _tmp98 = -_tmp41;
  const Scalar _tmp99 = -_tmp43;
  const Scalar _tmp100 = _tmp28 + _tmp99;
  const Scalar _tmp101 = std::pow(_source_pose[3], Scalar(2));
  const Scalar _tmp102 = -_tmp26;
  const Scalar _tmp103 = _tmp101 + _tmp102;
  const Scalar _tmp104 = _tmp19 * (_tmp40 + _tmp98) + _tmp25 * (_tmp100 + _tmp103);
  const Scalar _tmp105 = -_tmp21;
  const Scalar _tmp106 = _tmp19 * (_tmp105 + _tmp22) + _tmp25 * _tmp9;
  const Scalar _tmp107 = -_tmp101;
  const Scalar _tmp108 = _tmp19 * (_tmp102 + _tmp107 + _tmp28 + _tmp43) + _tmp25 * _tmp42;
  const Scalar _tmp109 = _tmp104 * _tmp59 + _tmp106 * _tmp60 + _tmp108 * _tmp64;
  const Scalar _tmp110 = std::pow(_tmp67, Scalar(2));
  const Scalar _tmp111 = _tmp56 / _tmp110;
  const Scalar _tmp112 = Scalar(1.0) / (_tmp67);
  const Scalar _tmp113 = _tmp104 * _tmp49 + _tmp106 * _tmp4 + _tmp108 * _tmp36;
  const Scalar _tmp114 = -_tmp109 * _tmp111 + _tmp112 * _tmp113;
  const Scalar _tmp115 = _target_calibration[0] / (_tmp110 + _tmp75);
  const Scalar _tmp116 = _tmp115 * _tmp95;
  const Scalar _tmp117 = _tmp110 * _tmp116;
  const Scalar _tmp118 = _tmp115 * _tmp68;
  const Scalar _tmp119 = 2 * _tmp118;
  const Scalar _tmp120 = _tmp110 * _tmp119;
  const Scalar _tmp121 = Scalar(1.0) / (_tmp78);
  const Scalar _tmp122 = 2 * _tmp56;
  const Scalar _tmp123 = 2 * _tmp66;
  const Scalar _tmp124 = std::pow(_tmp78, Scalar(2));
  const Scalar _tmp125 = _tmp74 / _tmp77;
  const Scalar _tmp126 = _tmp125 / _tmp124;
  const Scalar _tmp127 = (Scalar(1) / Scalar(2)) * _tmp126;
  const Scalar _tmp128 = _tmp121 * (_tmp104 * _tmp72 + _tmp106 * _tmp71 + _tmp108 * _tmp69) -
                         _tmp127 * (_tmp109 * _tmp123 + _tmp113 * _tmp122);
  const Scalar _tmp129 = _target_calibration[1] / (_tmp124 + _tmp92);
  const Scalar _tmp130 = _tmp129 * _tmp79;
  const Scalar _tmp131 = 2 * _tmp130;
  const Scalar _tmp132 = _tmp124 * _tmp131;
  const Scalar _tmp133 = _tmp114 * _tmp120 + _tmp128 * _tmp132;
  const Scalar _tmp134 = (Scalar(1) / Scalar(2)) * _tmp68;
  const Scalar _tmp135 = _tmp94 / (_tmp80 * std::sqrt(_tmp80));
  const Scalar _tmp136 = _tmp134 * _tmp135;
  const Scalar _tmp137 =
      _tmp81 * _tmp82 * _tmp85 * std::pow(_tmp86, Scalar(_tmp89 - 1)) * _tmp91 * _tmp93 / _tmp90;
  const Scalar _tmp138 = _tmp134 * _tmp137;
  const Scalar _tmp139 = _tmp114 * _tmp117 - _tmp133 * _tmp136 + _tmp133 * _tmp138;
  const Scalar _tmp140 = (Scalar(1) / Scalar(2)) * _tmp79;
  const Scalar _tmp141 = _tmp137 * _tmp140;
  const Scalar _tmp142 = _tmp135 * _tmp140;
  const Scalar _tmp143 = _tmp129 * _tmp95;
  const Scalar _tmp144 = _tmp124 * _tmp143;
  const Scalar _tmp145 = _tmp128 * _tmp144 + _tmp133 * _tmp141 - _tmp133 * _tmp142;
  const Scalar _tmp146 = _tmp107 + _tmp26;
  const Scalar _tmp147 = -_tmp28;
  const Scalar _tmp148 = _tmp147 + _tmp43;
  const Scalar _tmp149 = _tmp11 * _tmp51 + _tmp30 * (_tmp146 + _tmp148);
  const Scalar _tmp150 = _tmp19 * _tmp38 + _tmp30 * (_tmp39 + _tmp98);
  const Scalar _tmp151 = -_tmp6;
  const Scalar _tmp152 = _tmp19 * (_tmp103 + _tmp148) + _tmp30 * (_tmp151 + _tmp50);
  const Scalar _tmp153 = _tmp149 * _tmp59 + _tmp150 * _tmp64 + _tmp152 * _tmp60;
  const Scalar _tmp154 = _tmp149 * _tmp49 + _tmp150 * _tmp36 + _tmp152 * _tmp4;
  const Scalar _tmp155 = -_tmp111 * _tmp153 + _tmp112 * _tmp154;
  const Scalar _tmp156 = _tmp121 * (_tmp149 * _tmp72 + _tmp150 * _tmp69 + _tmp152 * _tmp71) -
                         _tmp127 * (_tmp122 * _tmp154 + _tmp123 * _tmp153);
  const Scalar _tmp157 = _tmp120 * _tmp155 + _tmp132 * _tmp156;
  const Scalar _tmp158 = _tmp117 * _tmp155 - _tmp136 * _tmp157 + _tmp138 * _tmp157;
  const Scalar _tmp159 = _tmp141 * _tmp157 - _tmp142 * _tmp157 + _tmp144 * _tmp156;
  const Scalar _tmp160 =
      _tmp25 * (_tmp105 + _tmp23) + _tmp30 * (_tmp101 + _tmp147 + _tmp26 + _tmp99);
  const Scalar _tmp161 = _tmp25 * (_tmp151 + _tmp8) + _tmp30 * _tmp53;
  const Scalar _tmp162 = _tmp24 * _tmp30 + _tmp25 * (_tmp100 + _tmp146);
  const Scalar _tmp163 = _tmp160 * _tmp36 + _tmp161 * _tmp49 + _tmp162 * _tmp4;
  const Scalar _tmp164 = _tmp160 * _tmp64 + _tmp161 * _tmp59 + _tmp162 * _tmp60;
  const Scalar _tmp165 = -_tmp111 * _tmp164 + _tmp112 * _tmp163;
  const Scalar _tmp166 =
      _tmp124 * (_tmp121 * (_tmp160 * _tmp69 + _tmp161 * _tmp72 + _tmp162 * _tmp71) -
                 _tmp127 * (_tmp122 * _tmp163 + _tmp123 * _tmp164));
  const Scalar _tmp167 = _tmp120 * _tmp165 + _tmp131 * _tmp166;
  const Scalar _tmp168 = _tmp117 * _tmp165 - _tmp136 * _tmp167 + _tmp138 * _tmp167;
  const Scalar _tmp169 = _tmp141 * _tmp167 - _tmp142 * _tmp167 + _tmp143 * _tmp166;
  const Scalar _tmp170 = _tmp111 * source_inverse_range;
  const Scalar _tmp171 = _tmp170 * _tmp60;
  const Scalar _tmp172 = _tmp112 * source_inverse_range;
  const Scalar _tmp173 = _tmp172 * _tmp4;
  const Scalar _tmp174 = -_tmp171 + _tmp173;
  const Scalar _tmp175 = _tmp122 * source_inverse_range;
  const Scalar _tmp176 = _tmp175 * _tmp4;
  const Scalar _tmp177 = _tmp123 * source_inverse_range;
  const Scalar _tmp178 = _tmp177 * _tmp60;
  const Scalar _tmp179 = _tmp121 * source_inverse_range;
  const Scalar _tmp180 = _tmp179 * _tmp71;
  const Scalar _tmp181 = -_tmp127 * (_tmp176 + _tmp178) + _tmp180;
  const Scalar _tmp182 = _tmp120 * _tmp174 + _tmp132 * _tmp181;
  const Scalar _tmp183 = _tmp134 * _tmp182;
  const Scalar _tmp184 = _tmp117 * _tmp174 - _tmp135 * _tmp183 + _tmp137 * _tmp183;
  const Scalar _tmp185 = _tmp141 * _tmp182 - _tmp142 * _tmp182 + _tmp144 * _tmp181;
  const Scalar _tmp186 = _tmp172 * _tmp36;
  const Scalar _tmp187 = _tmp170 * _tmp64;
  const Scalar _tmp188 = _tmp186 - _tmp187;
  const Scalar _tmp189 = _tmp175 * _tmp36;
  const Scalar _tmp190 = _tmp177 * _tmp64;
  const Scalar _tmp191 = _tmp179 * _tmp69;
  const Scalar _tmp192 = -_tmp127 * (_tmp189 + _tmp190) + _tmp191;
  const Scalar _tmp193 = _tmp120 * _tmp188 + _tmp132 * _tmp192;
  const Scalar _tmp194 = _tmp117 * _tmp188 - _tmp136 * _tmp193 + _tmp138 * _tmp193;
  const Scalar _tmp195 = _tmp141 * _tmp193 - _tmp142 * _tmp193 + _tmp144 * _tmp192;
  const Scalar _tmp196 = _tmp172 * _tmp49;
  const Scalar _tmp197 = _tmp170 * _tmp59;
  const Scalar _tmp198 = _tmp196 - _tmp197;
  const Scalar _tmp199 = _tmp177 * _tmp59;
  const Scalar _tmp200 = _tmp175 * _tmp49;
  const Scalar _tmp201 = _tmp179 * _tmp72;
  const Scalar _tmp202 = -_tmp127 * (_tmp199 + _tmp200) + _tmp201;
  const Scalar _tmp203 = _tmp120 * _tmp198 + _tmp132 * _tmp202;
  const Scalar _tmp204 = _tmp117 * _tmp198 - _tmp136 * _tmp203 + _tmp138 * _tmp203;
  const Scalar _tmp205 = _tmp141 * _tmp203 - _tmp142 * _tmp203 + _tmp144 * _tmp202;
  const Scalar _tmp206 = -_tmp35;
  const Scalar _tmp207 = -_tmp0;
  const Scalar _tmp208 = _tmp2 + _tmp207;
  const Scalar _tmp209 = std::pow(_target_pose[3], Scalar(2));
  const Scalar _tmp210 = -_tmp209;
  const Scalar _tmp211 = _tmp210 + _tmp57;
  const Scalar _tmp212 = -_tmp61;
  const Scalar _tmp213 =
      _tmp31 * (_tmp206 + _tmp33) + _tmp45 * (_tmp208 + _tmp211) + _tmp54 * (_tmp212 + _tmp63);
  const Scalar _tmp214 = -_tmp57;
  const Scalar _tmp215 = _tmp209 + _tmp214;
  const Scalar _tmp216 =
      _tmp121 * (_tmp54 * (_tmp208 + _tmp215) + _tmp65) - _tmp126 * _tmp213 * _tmp66;
  const Scalar _tmp217 = -_tmp118 * _tmp122 * _tmp213 + _tmp132 * _tmp216;
  const Scalar _tmp218 = -_tmp116 * _tmp213 * _tmp56 - _tmp136 * _tmp217 + _tmp138 * _tmp217;
  const Scalar _tmp219 = _tmp141 * _tmp217 - _tmp142 * _tmp217 + _tmp144 * _tmp216;
  const Scalar _tmp220 = -_tmp46;
  const Scalar _tmp221 = -_tmp2;
  const Scalar _tmp222 = _tmp0 + _tmp221;
  const Scalar _tmp223 =
      _tmp31 * (_tmp220 + _tmp48) + _tmp45 * (_tmp212 + _tmp62) + _tmp54 * (_tmp211 + _tmp222);
  const Scalar _tmp224 = _tmp31 * (_tmp207 + _tmp209 + _tmp221 + _tmp57) + _tmp55;
  const Scalar _tmp225 = -_tmp111 * _tmp224 + _tmp112 * _tmp223;
  const Scalar _tmp226 = _tmp125 * (_tmp122 * _tmp223 + _tmp123 * _tmp224);
  const Scalar _tmp227 = _tmp120 * _tmp225 - _tmp130 * _tmp226;
  const Scalar _tmp228 = _tmp117 * _tmp225 - _tmp136 * _tmp227 + _tmp138 * _tmp227;
  const Scalar _tmp229 =
      _tmp141 * _tmp227 - _tmp142 * _tmp227 - Scalar(1) / Scalar(2) * _tmp143 * _tmp226;
  const Scalar _tmp230 = _tmp45 * (_tmp215 + _tmp222) + _tmp73;
  const Scalar _tmp231 = _tmp121 * (_tmp31 * (_tmp0 + _tmp2 + _tmp210 + _tmp214) +
                                    _tmp45 * (_tmp206 + _tmp70) + _tmp54 * (_tmp220 + _tmp47)) -
                         _tmp126 * _tmp230 * _tmp56;
  const Scalar _tmp232 = _tmp230 * _tmp67;
  const Scalar _tmp233 = _tmp119 * _tmp232 + _tmp132 * _tmp231;
  const Scalar _tmp234 = _tmp116 * _tmp232 - _tmp136 * _tmp233 + _tmp138 * _tmp233;
  const Scalar _tmp235 = _tmp141 * _tmp233 - _tmp142 * _tmp233 + _tmp144 * _tmp231;
  const Scalar _tmp236 = -_tmp127 * (-_tmp176 - _tmp178) - _tmp180;
  const Scalar _tmp237 = _tmp110 * (_tmp171 - _tmp173);
  const Scalar _tmp238 = _tmp119 * _tmp237 + _tmp132 * _tmp236;
  const Scalar _tmp239 = _tmp116 * _tmp237 - _tmp136 * _tmp238 + _tmp138 * _tmp238;
  const Scalar _tmp240 = _tmp141 * _tmp238 - _tmp142 * _tmp238 + _tmp144 * _tmp236;
  const Scalar _tmp241 = -_tmp186 + _tmp187;
  const Scalar _tmp242 = -_tmp127 * (-_tmp189 - _tmp190) - _tmp191;
  const Scalar _tmp243 = _tmp120 * _tmp241 + _tmp132 * _tmp242;
  const Scalar _tmp244 = _tmp117 * _tmp241 - _tmp136 * _tmp243 + _tmp138 * _tmp243;
  const Scalar _tmp245 = _tmp141 * _tmp243 - _tmp142 * _tmp243 + _tmp144 * _tmp242;
  const Scalar _tmp246 = -_tmp196 + _tmp197;
  const Scalar _tmp247 = -_tmp127 * (-_tmp199 - _tmp200) - _tmp201;
  const Scalar _tmp248 = _tmp120 * _tmp246 + _tmp132 * _tmp247;
  const Scalar _tmp249 = _tmp117 * _tmp246 - _tmp136 * _tmp248 + _tmp138 * _tmp248;
  const Scalar _tmp250 = _tmp141 * _tmp248 - _tmp142 * _tmp248 + _tmp144 * _tmp247;
  const Scalar _tmp251 = _tmp20 * _tmp60 + _tmp37 * _tmp64 + _tmp52 * _tmp59;
  const Scalar _tmp252 = _tmp20 * _tmp4 + _tmp36 * _tmp37 + _tmp49 * _tmp52;
  const Scalar _tmp253 = -_tmp111 * _tmp251 + _tmp112 * _tmp252;
  const Scalar _tmp254 = _tmp121 * (_tmp20 * _tmp71 + _tmp37 * _tmp69 + _tmp52 * _tmp72) -
                         _tmp127 * (_tmp122 * _tmp252 + _tmp123 * _tmp251);
  const Scalar _tmp255 = _tmp120 * _tmp253 + _tmp132 * _tmp254;
  const Scalar _tmp256 = _tmp117 * _tmp253 - _tmp136 * _tmp255 + _tmp138 * _tmp255;
  const Scalar _tmp257 = _tmp141 * _tmp255 - _tmp142 * _tmp255 + _tmp144 * _tmp254;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp96;
    _res(1, 0) = _tmp97;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp139;
    _jacobian(1, 0) = _tmp145;
    _jacobian(0, 1) = _tmp158;
    _jacobian(1, 1) = _tmp159;
    _jacobian(0, 2) = _tmp168;
    _jacobian(1, 2) = _tmp169;
    _jacobian(0, 3) = _tmp184;
    _jacobian(1, 3) = _tmp185;
    _jacobian(0, 4) = _tmp194;
    _jacobian(1, 4) = _tmp195;
    _jacobian(0, 5) = _tmp204;
    _jacobian(1, 5) = _tmp205;
    _jacobian(0, 6) = _tmp218;
    _jacobian(1, 6) = _tmp219;
    _jacobian(0, 7) = _tmp228;
    _jacobian(1, 7) = _tmp229;
    _jacobian(0, 8) = _tmp234;
    _jacobian(1, 8) = _tmp235;
    _jacobian(0, 9) = _tmp239;
    _jacobian(1, 9) = _tmp240;
    _jacobian(0, 10) = _tmp244;
    _jacobian(1, 10) = _tmp245;
    _jacobian(0, 11) = _tmp249;
    _jacobian(1, 11) = _tmp250;
    _jacobian(0, 12) = _tmp256;
    _jacobian(1, 12) = _tmp257;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp139, Scalar(2)) + std::pow(_tmp145, Scalar(2));
    _hessian(1, 0) = _tmp139 * _tmp158 + _tmp145 * _tmp159;
    _hessian(2, 0) = _tmp139 * _tmp168 + _tmp145 * _tmp169;
    _hessian(3, 0) = _tmp139 * _tmp184 + _tmp145 * _tmp185;
    _hessian(4, 0) = _tmp139 * _tmp194 + _tmp145 * _tmp195;
    _hessian(5, 0) = _tmp139 * _tmp204 + _tmp145 * _tmp205;
    _hessian(6, 0) = _tmp139 * _tmp218 + _tmp145 * _tmp219;
    _hessian(7, 0) = _tmp139 * _tmp228 + _tmp145 * _tmp229;
    _hessian(8, 0) = _tmp139 * _tmp234 + _tmp145 * _tmp235;
    _hessian(9, 0) = _tmp139 * _tmp239 + _tmp145 * _tmp240;
    _hessian(10, 0) = _tmp139 * _tmp244 + _tmp145 * _tmp245;
    _hessian(11, 0) = _tmp139 * _tmp249 + _tmp145 * _tmp250;
    _hessian(12, 0) = _tmp139 * _tmp256 + _tmp145 * _tmp257;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp158, Scalar(2)) + std::pow(_tmp159, Scalar(2));
    _hessian(2, 1) = _tmp158 * _tmp168 + _tmp159 * _tmp169;
    _hessian(3, 1) = _tmp158 * _tmp184 + _tmp159 * _tmp185;
    _hessian(4, 1) = _tmp158 * _tmp194 + _tmp159 * _tmp195;
    _hessian(5, 1) = _tmp158 * _tmp204 + _tmp159 * _tmp205;
    _hessian(6, 1) = _tmp158 * _tmp218 + _tmp159 * _tmp219;
    _hessian(7, 1) = _tmp158 * _tmp228 + _tmp159 * _tmp229;
    _hessian(8, 1) = _tmp158 * _tmp234 + _tmp159 * _tmp235;
    _hessian(9, 1) = _tmp158 * _tmp239 + _tmp159 * _tmp240;
    _hessian(10, 1) = _tmp158 * _tmp244 + _tmp159 * _tmp245;
    _hessian(11, 1) = _tmp158 * _tmp249 + _tmp159 * _tmp250;
    _hessian(12, 1) = _tmp158 * _tmp256 + _tmp159 * _tmp257;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp168, Scalar(2)) + std::pow(_tmp169, Scalar(2));
    _hessian(3, 2) = _tmp168 * _tmp184 + _tmp169 * _tmp185;
    _hessian(4, 2) = _tmp168 * _tmp194 + _tmp169 * _tmp195;
    _hessian(5, 2) = _tmp168 * _tmp204 + _tmp169 * _tmp205;
    _hessian(6, 2) = _tmp168 * _tmp218 + _tmp169 * _tmp219;
    _hessian(7, 2) = _tmp168 * _tmp228 + _tmp169 * _tmp229;
    _hessian(8, 2) = _tmp168 * _tmp234 + _tmp169 * _tmp235;
    _hessian(9, 2) = _tmp168 * _tmp239 + _tmp169 * _tmp240;
    _hessian(10, 2) = _tmp168 * _tmp244 + _tmp169 * _tmp245;
    _hessian(11, 2) = _tmp168 * _tmp249 + _tmp169 * _tmp250;
    _hessian(12, 2) = _tmp168 * _tmp256 + _tmp169 * _tmp257;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp184, Scalar(2)) + std::pow(_tmp185, Scalar(2));
    _hessian(4, 3) = _tmp184 * _tmp194 + _tmp185 * _tmp195;
    _hessian(5, 3) = _tmp184 * _tmp204 + _tmp185 * _tmp205;
    _hessian(6, 3) = _tmp184 * _tmp218 + _tmp185 * _tmp219;
    _hessian(7, 3) = _tmp184 * _tmp228 + _tmp185 * _tmp229;
    _hessian(8, 3) = _tmp184 * _tmp234 + _tmp185 * _tmp235;
    _hessian(9, 3) = _tmp184 * _tmp239 + _tmp185 * _tmp240;
    _hessian(10, 3) = _tmp184 * _tmp244 + _tmp185 * _tmp245;
    _hessian(11, 3) = _tmp184 * _tmp249 + _tmp185 * _tmp250;
    _hessian(12, 3) = _tmp184 * _tmp256 + _tmp185 * _tmp257;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp194, Scalar(2)) + std::pow(_tmp195, Scalar(2));
    _hessian(5, 4) = _tmp194 * _tmp204 + _tmp195 * _tmp205;
    _hessian(6, 4) = _tmp194 * _tmp218 + _tmp195 * _tmp219;
    _hessian(7, 4) = _tmp194 * _tmp228 + _tmp195 * _tmp229;
    _hessian(8, 4) = _tmp194 * _tmp234 + _tmp195 * _tmp235;
    _hessian(9, 4) = _tmp194 * _tmp239 + _tmp195 * _tmp240;
    _hessian(10, 4) = _tmp194 * _tmp244 + _tmp195 * _tmp245;
    _hessian(11, 4) = _tmp194 * _tmp249 + _tmp195 * _tmp250;
    _hessian(12, 4) = _tmp194 * _tmp256 + _tmp195 * _tmp257;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp204, Scalar(2)) + std::pow(_tmp205, Scalar(2));
    _hessian(6, 5) = _tmp204 * _tmp218 + _tmp205 * _tmp219;
    _hessian(7, 5) = _tmp204 * _tmp228 + _tmp205 * _tmp229;
    _hessian(8, 5) = _tmp204 * _tmp234 + _tmp205 * _tmp235;
    _hessian(9, 5) = _tmp204 * _tmp239 + _tmp205 * _tmp240;
    _hessian(10, 5) = _tmp204 * _tmp244 + _tmp205 * _tmp245;
    _hessian(11, 5) = _tmp204 * _tmp249 + _tmp205 * _tmp250;
    _hessian(12, 5) = _tmp204 * _tmp256 + _tmp205 * _tmp257;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp218, Scalar(2)) + std::pow(_tmp219, Scalar(2));
    _hessian(7, 6) = _tmp218 * _tmp228 + _tmp219 * _tmp229;
    _hessian(8, 6) = _tmp218 * _tmp234 + _tmp219 * _tmp235;
    _hessian(9, 6) = _tmp218 * _tmp239 + _tmp219 * _tmp240;
    _hessian(10, 6) = _tmp218 * _tmp244 + _tmp219 * _tmp245;
    _hessian(11, 6) = _tmp218 * _tmp249 + _tmp219 * _tmp250;
    _hessian(12, 6) = _tmp218 * _tmp256 + _tmp219 * _tmp257;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp228, Scalar(2)) + std::pow(_tmp229, Scalar(2));
    _hessian(8, 7) = _tmp228 * _tmp234 + _tmp229 * _tmp235;
    _hessian(9, 7) = _tmp228 * _tmp239 + _tmp229 * _tmp240;
    _hessian(10, 7) = _tmp228 * _tmp244 + _tmp229 * _tmp245;
    _hessian(11, 7) = _tmp228 * _tmp249 + _tmp229 * _tmp250;
    _hessian(12, 7) = _tmp228 * _tmp256 + _tmp229 * _tmp257;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp234, Scalar(2)) + std::pow(_tmp235, Scalar(2));
    _hessian(9, 8) = _tmp234 * _tmp239 + _tmp235 * _tmp240;
    _hessian(10, 8) = _tmp234 * _tmp244 + _tmp235 * _tmp245;
    _hessian(11, 8) = _tmp234 * _tmp249 + _tmp235 * _tmp250;
    _hessian(12, 8) = _tmp234 * _tmp256 + _tmp235 * _tmp257;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = std::pow(_tmp239, Scalar(2)) + std::pow(_tmp240, Scalar(2));
    _hessian(10, 9) = _tmp239 * _tmp244 + _tmp240 * _tmp245;
    _hessian(11, 9) = _tmp239 * _tmp249 + _tmp240 * _tmp250;
    _hessian(12, 9) = _tmp239 * _tmp256 + _tmp240 * _tmp257;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = std::pow(_tmp244, Scalar(2)) + std::pow(_tmp245, Scalar(2));
    _hessian(11, 10) = _tmp244 * _tmp249 + _tmp245 * _tmp250;
    _hessian(12, 10) = _tmp244 * _tmp256 + _tmp245 * _tmp257;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = std::pow(_tmp249, Scalar(2)) + std::pow(_tmp250, Scalar(2));
    _hessian(12, 11) = _tmp249 * _tmp256 + _tmp250 * _tmp257;
    _hessian(0, 12) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 12) = 0;
    _hessian(12, 12) = std::pow(_tmp256, Scalar(2)) + std::pow(_tmp257, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp139 * _tmp96 + _tmp145 * _tmp97;
    _rhs(1, 0) = _tmp158 * _tmp96 + _tmp159 * _tmp97;
    _rhs(2, 0) = _tmp168 * _tmp96 + _tmp169 * _tmp97;
    _rhs(3, 0) = _tmp184 * _tmp96 + _tmp185 * _tmp97;
    _rhs(4, 0) = _tmp194 * _tmp96 + _tmp195 * _tmp97;
    _rhs(5, 0) = _tmp204 * _tmp96 + _tmp205 * _tmp97;
    _rhs(6, 0) = _tmp218 * _tmp96 + _tmp219 * _tmp97;
    _rhs(7, 0) = _tmp228 * _tmp96 + _tmp229 * _tmp97;
    _rhs(8, 0) = _tmp234 * _tmp96 + _tmp235 * _tmp97;
    _rhs(9, 0) = _tmp239 * _tmp96 + _tmp240 * _tmp97;
    _rhs(10, 0) = _tmp244 * _tmp96 + _tmp245 * _tmp97;
    _rhs(11, 0) = _tmp249 * _tmp96 + _tmp250 * _tmp97;
    _rhs(12, 0) = _tmp256 * _tmp96 + _tmp257 * _tmp97;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
