// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cam_package/CLASS.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <ostream>
#include <random>
#include <vector>

#include <Eigen/Core>

#include <sym/ops/storage_ops.h>

namespace sym {

/**
 * Autogenerated C++ implementation of `symforce.cam.orthographic_camera_cal.OrthographicCameraCal`.
 *
 * Orthographic camera model with four parameters [fx, fy, cx, cy].
 *
 * It would be possible to define orthographic cameras with only two parameters [fx, fy] but we
 * keep the [cx, cy] parameters for consistency with the CameraCal interface.
 *
 * The orthographic camera model can be thought of as a special case of the LinearCameraCal model,
 * where (x,y,z) in the camera frame projects to pixel (x * fx + cx, y * fy + cy).
 * The z-coordinate of the point is ignored in the projection, except that only points with
 * positive z-coordinates are considered valid.
 *
 * Because this is a noncentral camera model, the camera_ray_from_pixel function is not implemented.
 */
template <typename ScalarType>
class OrthographicCameraCal {
 public:
  // Typedefs
  using Scalar = ScalarType;
  using Self = OrthographicCameraCal<Scalar>;
  using DataVec = Eigen::Matrix<Scalar, 4, 1, Eigen::DontAlign>;

  // Construct from focal_length, and principal_point.
  OrthographicCameraCal(const Eigen::Matrix<Scalar, 2, 1>& focal_length,
                        const Eigen::Matrix<Scalar, 2, 1>& principal_point)
      : OrthographicCameraCal(
            (Eigen::Matrix<Scalar, sym::StorageOps<Self>::StorageDim(), 1>() << focal_length,
             principal_point)
                .finished()) {}

  /**
   * Construct from data vec
   *
   * @param normalize Project to the manifold on construction.  This ensures numerical stability as
   *     this constructor is called after each codegen operation.  Constructing from a normalized
   *     vector may be faster, e.g. with `FromStorage`.
   */
  explicit OrthographicCameraCal(const DataVec& data, bool normalize = true) : data_(data) {
    (void)normalize;
  }

  // Access underlying storage as const
  inline const DataVec& Data() const {
    return data_;
  }

  // --------------------------------------------------------------------------
  // StorageOps concept
  // --------------------------------------------------------------------------

  static constexpr int32_t StorageDim() {
    return sym::StorageOps<Self>::StorageDim();
  }

  void ToStorage(Scalar* const vec) const {
    return sym::StorageOps<Self>::ToStorage(*this, vec);
  }

  static OrthographicCameraCal FromStorage(const Scalar* const vec) {
    return sym::StorageOps<Self>::FromStorage(vec);
  }

  // --------------------------------------------------------------------------
  // Camera model methods
  // --------------------------------------------------------------------------

  /**
   * Return the focal length.
   */
  Eigen::Matrix<Scalar, 2, 1> FocalLength() const;

  /**
   * Return the principal point.
   */
  Eigen::Matrix<Scalar, 2, 1> PrincipalPoint() const;

  /**
   * Project a 3D point in the camera frame into 2D pixel coordinates.
   *
   * Returns:
   *     pixel: (x, y) coordinate in pixels if valid
   *     is_valid: 1 if the operation is within bounds else 0
   */
  Eigen::Matrix<Scalar, 2, 1> PixelFromCameraPoint(const Eigen::Matrix<Scalar, 3, 1>& point,
                                                   const Scalar epsilon,
                                                   Scalar* const is_valid = nullptr) const;

  /**
   * Project a 3D point in the camera frame into 2D pixel coordinates.
   *
   * Returns:
   *     pixel: (x, y) coordinate in pixels if valid
   *     is_valid: 1 if the operation is within bounds else 0
   *     pixel_D_cal: Derivative of pixel with respect to intrinsic calibration parameters
   *     pixel_D_point: Derivative of pixel with respect to point
   */
  Eigen::Matrix<Scalar, 2, 1> PixelFromCameraPointWithJacobians(
      const Eigen::Matrix<Scalar, 3, 1>& point, const Scalar epsilon,
      Scalar* const is_valid = nullptr, Eigen::Matrix<Scalar, 2, 4>* const pixel_D_cal = nullptr,
      Eigen::Matrix<Scalar, 2, 3>* const pixel_D_point = nullptr) const;

  // --------------------------------------------------------------------------
  // General Helpers
  // --------------------------------------------------------------------------

  bool IsApprox(const Self& b, const Scalar tol) const {
    // isApprox is multiplicative so we check the norm for the exact zero case
    // https://eigen.tuxfamily.org/dox/classEigen_1_1DenseBase.html#ae8443357b808cd393be1b51974213f9c
    if (b.Data() == DataVec::Zero()) {
      return Data().norm() < tol;
    }

    return Data().isApprox(b.Data(), tol);
  }

  template <typename ToScalar>
  OrthographicCameraCal<ToScalar> Cast() const {
    return OrthographicCameraCal<ToScalar>(Data().template cast<ToScalar>());
  }

  bool operator==(const OrthographicCameraCal& rhs) const {
    return data_ == rhs.Data();
  }

  bool operator!=(const OrthographicCameraCal& rhs) const {
    return !(*this == rhs);
  }

 protected:
  DataVec data_;
};

// Shorthand for scalar types
using OrthographicCameraCald = OrthographicCameraCal<double>;
using OrthographicCameraCalf = OrthographicCameraCal<float>;

// Print definitions
std::ostream& operator<<(std::ostream& os, const OrthographicCameraCal<double>& a);
std::ostream& operator<<(std::ostream& os, const OrthographicCameraCal<float>& a);

}  // namespace sym

// Externs to reduce duplicate instantiation
extern template class sym::OrthographicCameraCal<double>;
extern template class sym::OrthographicCameraCal<float>;

static_assert(sizeof(sym::OrthographicCameraCal<double>) == 4 * sizeof(double));
static_assert(alignof(sym::OrthographicCameraCal<double>) == sizeof(double));
static_assert(sizeof(sym::OrthographicCameraCal<float>) == 4 * sizeof(float));
static_assert(alignof(sym::OrthographicCameraCal<float>) == sizeof(float));

// Concept implementations for this class
#include "./ops/orthographic_camera_cal/group_ops.h"
#include "./ops/orthographic_camera_cal/lie_group_ops.h"
#include "./ops/orthographic_camera_cal/storage_ops.h"
